// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  // Bucket relationships
  ownedBuckets  Bucket[]
  bucketMemberships BucketMember[]
  bucketInvitations BucketMember[] @relation("BucketInviter")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Bucket {
  id                String   @id @default(cuid())
  name              String
  provider          String   // AWS, Cloudflare, DigitalOcean, etc.
  region            String
  endpoint          String?  // Custom endpoint for S3-compatible services
  encryptedAccessKey String  // Password-based encrypted
  encryptedSecretKey String  // Password-based encrypted
  bucketName        String
  passwordHash      String?  // Hashed encryption password for verification
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  ownerId           String
  owner             User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Bucket members for sharing
  members           BucketMember[]

  @@unique([ownerId, bucketName, provider])
  @@map("bucket")
}

model BucketMember {
  id        String   @id @default(cuid())
  bucketId  String
  userId    String
  role      String   @default("viewer") // viewer, editor, admin
  invitedBy String
  invitedAt DateTime @default(now())
  acceptedAt DateTime?

  bucket    Bucket   @relation(fields: [bucketId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviter   User     @relation("BucketInviter", fields: [invitedBy], references: [id])

  @@unique([bucketId, userId])
  @@map("bucket_member")
}
